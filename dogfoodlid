#!/usr/bin/env node

const fs = require('fs');
var arguments = process.argv;

console.log("parsing dictionary......")

const dictionaryTable = (function(){
  let key;

  return fs.readFileSync("british.txt", {encoding:'utf8', flag:'r'}).
    split("\r\n").
    reduce(function(memo, word){
      key = word.split('').sort().join('');
      memo[key] = memo[key] || [];
      memo[key].push(word);
      return memo;
    }, {});
})();

function Anagram(text){
  this.text = text;
  this.material = text.split('');
}

Anagram.prototype.variations = function(){
  let text = this.text;
  let variations = {};
  let variation;

  console.log("finding anagrams......\n")

  while(true){
    Anagram.shuffleArray(this.material);
    variation = this.variation(this.material);

    variation.forEach(function(v){
      // only save true anagrams that contain all the material (not including spaces)
      if (v.replace(/ /g, '').length === text.replace(/ /g, '').length){
        if (variations[v]) return;
        console.log(v);
        variations[v] = true;
      }
    });
  }

  return Object.keys(variations);
};

Anagram.prototype.variation = function(){
  let remainingMaterial = this.material;
  let variations = [[]];
  let matchedWidth;

  while (remainingMaterial.length > 0){
    let matches = Anagram.findMatchesInMaterial(remainingMaterial, 1);

    if (!matches) return variations.map(function(variation){
      return variation.join(" ");
    });

    for (let i = 0; i < matches.length - 1; i++){
      variations.forEach(function(variation){
        variations.push(variation.slice());
      });
    }

    // populate all variations, cycling through matches until all
    // variations are populated with a match
    let n = 0;
    for (let i = 0; i < variations.length; i++){
      variations[i].push(matches[n]);
      n++;

      if (i === matches.length - 1) n = 0;
    }

    matchedWidth = matches[0].length;
    remainingMaterial = remainingMaterial.slice(matchedWidth, remainingMaterial.length);
  }

  return variations.map(function(variation){
    return variation.join(" ");
  });
};

Anagram.findMatchesInMaterial = function(material, width){
  let query = material.slice(0, width).sort().join('');
  let result = dictionaryTable[query];

  // found? return the matches
  if (result) return result;

  // end of material? give up
  if (width === material.length) return;

  // not found but still more material? expand the search
  return Anagram.findMatchesInMaterial(material, width + 1);
};

Anagram.shuffleArray = function(array){
  var count = array.length,
      randomnumber,
      temp;
  while( count ){
    randomnumber = Math.random() * count-- | 0;
    temp = array[count];
    array[count] = array[randomnumber];
    array[randomnumber] = temp
  }
};

const text = arguments[arguments.length - 1];
const anagram = new Anagram(text);
anagram.variations();
